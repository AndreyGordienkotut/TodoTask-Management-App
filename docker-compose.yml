version: '3.8'

services:
  # 1. DATABASE
  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3307:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  # 2. ZOOKEEPER
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  # 3. KAFKA MESSAGE BROKER
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend
      -
  # --- APPLICATION SERVICES ---

  # 4. SERVICE DISCOVERY (EUREKA)
  eureka-server:
    build:
      context: .
      dockerfile: ./eureka-server/Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - backend
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_started
      db:
        condition: service_started

  # 5. USER SERVICE
  user-service:
    build:
      context: .
      dockerfile: ./userService/Dockerfile
    container_name: user-service
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka-server:
        condition: service_started
    networks:
      - backend

  # 6. TASK SERVICE
  task-service:
    build:
      context: .
      dockerfile: ./taskService/Dockerfile
    container_name: task-service
    ports:
      - "8081:8081"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka-server:
        condition: service_started
    networks:
      - backend

  # 7. NOTIFICATION SERVICE
  notification-service:
    build:
      context: .
      dockerfile: ./notificationService/Dockerfile
    container_name: notification-service
    ports:
      - "8082:8082"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      eureka-server:
        condition: service_started
    networks:
      - backend
networks:
  backend:
    driver: bridge

volumes:
  mysql_data:
