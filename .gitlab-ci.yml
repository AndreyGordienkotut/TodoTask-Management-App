# --- CI/CD CONFIGURATION FOR GitLab ---
# –≠—Ç–∞–ø—ã:
# 1. –°–±–æ—Ä–∫–∞ Gradle
# 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ Docker Compose
# 4. (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ docker-compose up –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

stages:
  - build
  - test
  - docker
  - deploy

# === BUILD STAGE ===
#build:
#  stage: build
#  image: gradle:8.4-jdk17
#  script:
#    - chmod +x ./gradlew
#    - echo "üî® Building project..."
#    - ./gradlew clean build -x test --no-daemon
#  artifacts:
#    paths:
#      - build/libs/
#  only:
#    - master
#    - merge_requests
build:
  stage: build
  image: gradle:8.4-jdk17
  script:
    - chmod +x ./gradlew
    - echo "üî® Building project..."
    - ./gradlew clean :userService:bootJar :taskService:bootJar :notificationService:bootJar :eureka-server:bootJar --no-daemon
  artifacts:
    paths:
      - "**/build/libs/"
  only:
    - master
    - merge_requests

# === TEST STAGE ===
#test:
#  stage: test
#  image: gradle:8.4-jdk17
#  script:
#    - chmod +x ./gradlew
#    - echo "üß™ Running tests..."
#    - ./gradlew test --no-daemon
#  artifacts:
#    reports:
#      junit: build/test-results/test/TEST-*.xml
#  only:
#    - master
#    - merge_requests
# === TEST STAGE (Unit + Integration with Testcontainers/DIND) ===
test:
  stage: test
  # –ú–µ–Ω—è–µ–º –Ω–∞ –æ–±—Ä–∞–∑, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Docker (—á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å Testcontainers)
  image: docker:27.0.3
  services:
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã Testcontainers (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ Docker Daemon)
    - docker:dind
  variables:
    # 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ DIND (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è Testcontainers)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–∫ DOCKER_HOST
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    # 2. –û–±—ä—è–≤–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã Spring Boot/Testcontainers
    # –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ Secret Variables GitLab, –Ω–æ
    # –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤ 'script'.
    TEST_DB_USERNAME: $TEST_DB_USERNAME
    TEST_DB_PASSWORD: $TEST_DB_PASSWORD
    TEST_DB_URL: $TEST_DB_URL
    TEST_JWT_SECRET: $TEST_JWT_SECRET
    TEST_JWT_EXPIRATION: $TEST_JWT_EXPIRATION
    TEST_JWT_REFRESH_EXPIRATION: $TEST_JWT_REFRESH_EXPIRATION
    TELEG_USERNAME: $TELEG_USERNAME
    TELEG_TOKEN: $TELEG_TOKEN
    TEST_TELEG_USERNAME: $TEST_TELEG_USERNAME
    TEST_TELEG_TOKEN: $TEST_TELEG_TOKEN
    MAIL_HOST: $MAIL_HOST
    MAIL_PORT: $MAIL_PORT
    MAIL_USERNAME: $MAIL_USERNAME
    MAIL_PASSWORD: $MAIL_PASSWORD
    MAIL_SENDER: $MAIL_SENDER
    MAIL_SENDER_NAME: $MAIL_SENDER_NAME
    KAFKA_BOOTSTRAP_SERVERS: $KAFKA_BOOTSTRAP_SERVERS
  script:
    - echo "üß™ Running tests in DIND environment. Passing all ENV variables to Gradle container..."
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'docker run' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Gradle.
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Testcontainers (-e DOCKER_HOST)
    # –∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Spring Boot (-e TEST_DB_URL, -e MAIL_HOST –∏ —Ç.–¥.)
    # –ö–∞–∂–¥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ Spring –∏—Ö —É–≤–∏–¥–∏—Ç.
    - docker run --rm
      -v $PWD:/app
      -w /app
      -e DOCKER_HOST=$DOCKER_HOST # –ö–†–ò–¢–ò–ß–ù–û –¥–ª—è Testcontainers
      -e DOCKER_TLS_CERTDIR=$DOCKER_TLS_CERTDIR
      -e TEST_DB_USERNAME=$TEST_DB_USERNAME
      -e TEST_DB_PASSWORD=$TEST_DB_PASSWORD
      -e TEST_DB_URL=$TEST_DB_URL
      -e TEST_JWT_SECRET=$TEST_JWT_SECRET
      -e TEST_JWT_EXPIRATION=$TEST_JWT_EXPIRATION
      -e TEST_JWT_REFRESH_EXPIRATION=$TEST_JWT_REFRESH_EXPIRATION
      -e TELEG_USERNAME=$TELEG_USERNAME
      -e TELEG_TOKEN=$TELEG_TOKEN
      -e TEST_TELEG_USERNAME=$TEST_TELEG_USERNAME
      -e TEST_TELEG_TOKEN=$TEST_TELEG_TOKEN
      -e MAIL_HOST=$MAIL_HOST
      -e MAIL_PORT=$MAIL_PORT
      -e MAIL_USERNAME=$MAIL_USERNAME
      -e MAIL_PASSWORD=$MAIL_PASSWORD
      -e MAIL_SENDER=$MAIL_SENDER
      -e MAIL_SENDER_NAME=$MAIL_SENDER_NAME
      -e KAFKA_BOOTSTRAP_SERVERS=$KAFKA_BOOTSTRAP_SERVERS
      gradle:8.4-jdk17 sh -c "chmod +x ./gradlew && ./gradlew test --no-daemon"
  artifacts:
    reports:
      # –ü—É—Ç—å –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ —Ç–µ—Å—Ç–∞—Ö
      junit: "**/build/test-results/test/TEST-*.xml"
  # –†–∞–∑—Ä–µ—à–∏–º Job'—É –ø–∞–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Ç–µ—Å—Ç–∞
  allow_failure: true
  only:
    - master
    - merge_requests
docker-build:
  stage: docker
  image: docker:27.0.3
  services:
    - docker:dind
  script:
    - chmod +x ./gradlew
    - echo "üê≥ Building Docker images with Docker Compose..."
    - docker compose -f docker-compose.yml build
  only:
    - master

# === DEPLOY STAGE (optional, manual) ===
deploy:
  stage: deploy
  image: docker:27.0.3
  services:
    - docker:dind
  script:
    - echo "üöÄ Starting containers for testing..."
    - docker compose -f docker-compose.yml up -d
    - docker ps
  when: manual
  only:
    - master