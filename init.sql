-- MySQL Script generated by MySQL Workbench
-- Sat Oct 18 00:04:25 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema task
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `task` ;

-- -----------------------------------------------------
-- Schema task
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `task` DEFAULT CHARACTER SET utf8 ;
USE `task` ;

-- -----------------------------------------------------
-- Table `task`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `task`.`users` ;

CREATE TABLE IF NOT EXISTS `task`.`users` (
                                              `id` BIGINT NOT NULL AUTO_INCREMENT,
                                              `username` VARCHAR(100) NOT NULL,
    `password` VARCHAR(100) NOT NULL,
    `email` VARCHAR(100) NOT NULL,
    `telegram_chat_id` BIGINT NULL,
    `telegram_link_token` VARCHAR(200) NULL,
    `verified` TINYINT NOT NULL DEFAULT 0,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
    UNIQUE INDEX `telegram_link_token_UNIQUE` (`telegram_link_token` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `task`.`task`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `task`.`task` ;

CREATE TABLE IF NOT EXISTS `task`.`task` (
                                             `id` BIGINT NOT NULL AUTO_INCREMENT,
                                             `user_id` BIGINT NOT NULL,
                                             `title` VARCHAR(100) NOT NULL,
    `description` TEXT NOT NULL,
    `date` DATETIME NOT NULL,
    `due_date` DATETIME NULL,
    `status` ENUM("NOT_COMPLETED", "COMPLETED", "OVERDUE", "ARCHIVED") NOT NULL,
    `priority` ENUM("LOW", "MEDIUM", "HIGH", "CRITICAL") NOT NULL,
    `nearly_overdue_notified` TINYINT NOT NULL DEFAULT 0,
    `is_repeat` TINYINT NOT NULL DEFAULT 0,
    `frequency_repeat` ENUM("HOUR", "DAY", "WEEK", "MONTH", "YEAR") NULL,
    `parent_task_id` BIGINT NULL DEFAULT NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    INDEX `fk_task_user_idx` (`user_id` ASC) VISIBLE,
    CONSTRAINT `fk_task_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `task`.`users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `task`.`refresh_token`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `task`.`refresh_token` ;

CREATE TABLE IF NOT EXISTS `task`.`refresh_token` (
                                                      `id` BIGINT NOT NULL AUTO_INCREMENT,
                                                      `user_id` BIGINT NOT NULL,
                                                      `token` VARCHAR(150) NOT NULL,
    `expiry_date` DATETIME NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    INDEX `fk_RefreshToken_user1_idx` (`user_id` ASC) VISIBLE,
    CONSTRAINT `fk_RefreshToken_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `task`.`users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `task`.`notification`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `task`.`notification` ;

CREATE TABLE IF NOT EXISTS `task`.`notification` (
                                                     `id` BIGINT NOT NULL AUTO_INCREMENT,
                                                     `user_id` BIGINT NOT NULL,
                                                     `channel` ENUM("EMAIL", "TELEGRAM") NOT NULL,
    `recipient` VARCHAR(100) NULL,
    `recipient_telegram_id` BIGINT NULL,
    `subject` VARCHAR(200) NULL,
    `message` TEXT NOT NULL,
    `status` ENUM("PENDING", "SENT", "FAILED") NOT NULL,
    `created_at` DATETIME NOT NULL,
    `sent_at` DATETIME NULL,
    `error_message` TEXT NULL,
    PRIMARY KEY (`id`),
    INDEX `fk_notification_user1_idx` (`user_id` ASC) VISIBLE,
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    CONSTRAINT `fk_notification_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `task`.`users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `task`.`email_verification_tokens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `task`.`email_verification_tokens` ;

CREATE TABLE IF NOT EXISTS `task`.`email_verification_tokens` (
                                                                  `id` INT NOT NULL AUTO_INCREMENT,
                                                                  `users_id` BIGINT NOT NULL,
                                                                  `token` VARCHAR(255) NOT NULL,
    `expires_at` DATETIME NOT NULL,
    `used` TINYINT NULL DEFAULT 0,
    PRIMARY KEY (`id`),
    INDEX `fk_email_verification_tokens_users1_idx` (`users_id` ASC) VISIBLE,
    UNIQUE INDEX `token_UNIQUE` (`token` ASC) VISIBLE,
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    CONSTRAINT `fk_email_verification_tokens_users1`
    FOREIGN KEY (`users_id`)
    REFERENCES `task`.`users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
    ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
